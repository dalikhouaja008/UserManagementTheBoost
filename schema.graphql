# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PermissionType {
  resource: Resource!
  actions: [Action!]!
}

"""Type de ressource disponible"""
enum Resource {
  settings
  products
  users
}

"""Type de permission"""
enum Action {
  read
  create
  update
  delete
}

type RoleType {
  name: String!
  permissions: [PermissionType!]!
}

type User {
  _id: ID!

  """Nom d'utilisateur"""
  username: String!

  """Adresse e-mail de l'utilisateur"""
  email: String!

  """Mot de passe de l'utilisateur"""
  password: String!

  """Secret pour l'authentification à deux facteurs"""
  twoFactorSecret: String

  """Indique si l'utilisateur a activé l'authentification à deux facteurs"""
  isTwoFactorEnabled: Boolean!

  """Clé publique de la wallet de l'utilisateur"""
  publicKey: String

  """Rôle de l'utilisateur (par exemple, 'user', 'admin')"""
  role: String

  """Indique si l'utilisateur est vérifié"""
  isVerified: Boolean!

  """Date de création du compte"""
  createdAt: DateTime!

  """Date de mise à jour du compte"""
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type LoginResponse {
  """JWT Access Token"""
  accessToken: String

  """JWT Refresh Token"""
  refreshToken: String

  """Indique si la 2FA est requise"""
  requiresTwoFactor: Boolean!

  """token générer lors de la validation 2FA"""
  tempToken: String

  """Informations de l'utilisateur"""
  user: User
}

type AuthUser {
  _id: ID!

  """Nom d'utilisateur"""
  username: String!

  """Adresse e-mail de l'utilisateur"""
  email: String!

  """Mot de passe de l'utilisateur"""
  password: String!

  """Secret pour l'authentification à deux facteurs"""
  twoFactorSecret: String

  """Indique si l'utilisateur a activé la 2FA"""
  isTwoFactorEnabled: Boolean!

  """Date de création du compte"""
  createdAt: DateTime!

  """Date de mise à jour du compte"""
  updatedAt: DateTime!
}

type Land {
  id: ID!
  title: String!
  description: String!
  location: String!
  type: String!
  status: String!
  price: Float!
  imageUrl: String
  owner: AuthUser!
  createdAt: DateTime!
}

type Query {
  validateUser(userId: String!): User!
  lands(filters: FilterLandInput): [Land!]!
  land(id: String!): Land!
  myLands: [Land!]!
}

input FilterLandInput {
  type: String
  status: String
  location: String
  title: String
  price: PriceRangeInput
}

input PriceRangeInput {
  min: Float
  max: Float
}

type Mutation {
  signUp(signupData: UserInput!): User!
  login(credentials: LoginInput!): LoginResponse!
  refreshTokens(refreshTokenData: RefreshTokenInput!): String!
  changePassword(changePasswordData: ChangePasswordInput!): String!
  forgotPassword(forgotPasswordData: ForgotPasswordInput!): String!
  requestReset(email: String!): String!
  verifyCode(email: String!, code: String!): String!
  resetPassword(resetPasswordData: ResetPasswordInput!): User!
  enableTwoFactorAuth: String!
  verifyTwoFactorAuth(token: String!): Boolean!
  verifyTwoFactorLogin(token: String!): LoginResponse!
  create(input: CreateRoleDtoInput!): RoleType!
  createLand(createLandInput: CreateLandInput!): Land!
  updateLand(id: String!, updateLandInput: UpdateLandInput!): Land!
  updateLandStatus(id: String!, status: String!): Land!
  removeLand(id: String!): Land!
}

input UserInput {
  """Nom d'utilisateur"""
  username: String!

  """Adresse e-mail de l'utilisateur"""
  email: String!

  """Mot de passe de l'utilisateur"""
  password: String!

  """Rôle de l'utilisateur (par exemple, 'user', 'admin')"""
  role: String

  """Clé publique de la wallet de l'utilisateur"""
  publicKey: String

  """Secret pour l'authentification à deux facteurs"""
  twoFactorSecret: String

  """Indique si l'utilisateur est vérifié"""
  isVerified: Boolean! = false
}

input LoginInput {
  email: String!
  password: String!
}

input RefreshTokenInput {
  refreshToken: String!
}

input ChangePasswordInput {
  userId: String!
  oldPassword: String!
  newPassword: String!
}

input ForgotPasswordInput {
  email: String!
}

input ResetPasswordInput {
  email: String!
  code: String!
  newPassword: String!
}

input CreateRoleDtoInput {
  name: String!
  permissions: [PermissionInput!]!
}

input PermissionInput {
  resource: Resource!
  actions: [Action!]!
}

input CreateLandInput {
  title: String!
  description: String!
  location: String!
  type: String!
  price: Float!
  imageUrl: String
}

input UpdateLandInput {
  title: String
  description: String
  location: String
  type: String
  price: Float
  imageUrl: String
}