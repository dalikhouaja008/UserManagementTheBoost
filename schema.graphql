# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Permission {
  resource: Resource!
  actions: [Action!]!
}

"""Resources disponibles dans le service user-management"""
enum Resource {
  USERS
  ROLES
  AUTH
  SETTINGS
  LAND
  LAND_VALIDATION
  LAND_DOCUMENTS
  LAND_HISTORY
  NOTIFICATIONS
  DOCUMENTS
}

"""Actions disponibles dans l'application"""
enum Action {
  CREATE
  READ
  UPDATE
  DELETE
  VALIDATE
  REJECT
  SIGN
  MEASURE
  REVIEW
  UPLOAD_LAND
  EDIT_LAND
  DELETE_LAND
  VIEW_OWN_LANDS
  UPLOAD
  DOWNLOAD
  SUBMIT
  APPROVE
  REQUEST_CHANGES
  SEND
  RECEIVE
}

type Role {
  name: String!
  permissions: [Permission!]!
}

type User {
  _id: ID!

  """Nom d'utilisateur"""
  username: String!

  """Adresse e-mail de l'utilisateur"""
  email: String!

  """Mot de passe de l'utilisateur"""
  password: String!

  """Secret pour l'authentification à deux facteurs"""
  twoFactorSecret: String

  """Indique si l'utilisateur a activé l'authentification à deux facteurs"""
  isTwoFactorEnabled: Boolean!

  """Clé publique de la wallet de l'utilisateur"""
  publicKey: String

  """Rôle de l'utilisateur (par exemple, 'user', 'admin')"""
  role: String

  """Indique si l'utilisateur est vérifié"""
  isVerified: Boolean!

  """Date de création du compte"""
  createdAt: DateTime!

  """Date de mise à jour du compte"""
  updatedAt: DateTime!

  """Numéro de téléphone de l'utilisateur"""
  phoneNumber: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeviceInfo {
  userAgent: String
  ip: String
  device: String
  browser: String
  os: String
}

type LoginResponse {
  """JWT Access Token"""
  accessToken: String

  """JWT Refresh Token"""
  refreshToken: String

  """Indique si la 2FA est requise"""
  requiresTwoFactor: Boolean!

  """token générer lors de la validation 2FA"""
  tempToken: String

  """Informations de l'utilisateur"""
  user: User

  """ID de la session"""
  sessionId: String

  """Informations sur l'appareil"""
  deviceInfo: DeviceInfo
}

type Session {
  id: String!
  deviceInfo: DeviceInfo!
  createdAt: String!
  lastActive: String!
}

type Query {
  validateUser(userId: String!): User!
  getActiveSessions: [Session!]!
  roles: [Role!]!
  role(name: String!): Role!
  getRolePermissions(name: String!): [Permission!]!
}

type Mutation {
  signUp(signupData: UserInput!): User!
  createSpecialUser(input: UserInput!): User!
  login(credentials: LoginInput!): LoginResponse!
  changePassword(changePasswordData: ChangePasswordInput!): String!
  resetPassword(resetPasswordData: ResetPasswordInput!): User!
  forgotPassword(email: String!): String!
  requestReset(email: String!): String!
  verifyCode(identifier: String!, code: String!): String!
  enableTwoFactorAuth: String!
  verifyTwoFactorAuth(token: String!): Boolean!
  verifyTwoFactorLogin(token: String!): LoginResponse!
  logout: Boolean!
  logoutAllDevices: Boolean!
  revokeSession(sessionId: String!): Boolean!
  createRole(createRoleInput: CreateRoleInput!): Role!
  updateRole(updateRoleInput: UpdateRoleInput!): Role!
  deleteRole(name: String!): Boolean!
  forgotPasswordSms(phoneNumber: String!): String!
  create(input: CreateRoleDtoInput!): RoleType!
}

input UserInput {
  """Nom d'utilisateur"""
  username: String!

  """Adresse e-mail de l'utilisateur"""
  email: String!

  """Mot de passe de l'utilisateur"""
  password: String!

  """Rôle de l'utilisateur (par exemple, 'user', 'admin')"""
  role: String

  """Clé publique de la wallet de l'utilisateur"""
  phoneNumber: String

  """Secret pour l'authentification à deux facteurs"""
  twoFactorSecret: String

  """Indique si l'utilisateur est vérifié"""
  isVerified: Boolean! = false
}

input LoginInput {
  email: String!
  password: String!
  deviceInfo: DeviceInfoInput
}

input DeviceInfoInput {
  userAgent: String
  ip: String
  device: String
}

input ChangePasswordInput {
  userId: String!
  oldPassword: String!
  newPassword: String!
}

input ResetPasswordInput {
  token: String!
  newPassword: String!
}

input CreateRoleInput {
  name: String!
  permissions: [PermissionInput!]!
}

input PermissionInput {
  resource: Resource!
  actions: [Action!]!
}

input UpdateRoleInput {
  name: String!
  permissions: [PermissionInput!]!
}